
import java.util.Arrays; 
import java.util.Scanner; 
 
public class ColumnarTranspositionCipher { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
 
        System.out.print("Enter the text to encrypt: "); 
        String plainText = scanner.nextLine(); 
 
        System.out.print("Enter the key (a string representing the column order): "); 
        String columnOrder = scanner.nextLine(); 
 
        String encryptedText = encrypt(plainText, columnOrder); 
        System.out.println("Encrypted text: " + encryptedText); 
 
        scanner.close(); 
    } 
     
 

 
public static String encrypt(String plainText, String columnOrder)  
{ 
        int rows = (int) Math.ceil((double) plainText.length() / columnOrder.length()); 
        char[][] transpositionMatrix = new char[rows][columnOrder.length()]; 
 
                int index = 0; 
        for (int i = 0; i < rows; i++) { 
            for (int j = 0; j < columnOrder.length(); j++) { 
                if (index < plainText.length()) { 
                    transpositionMatrix[i][j] = plainText.charAt(index); 
                    index++; 
                } else { 
                    transpositionMatrix[i][j] = 'X'; // Padding with 'X' for incomplete cells 
                } 
            } 
        } 
 
char[] sortedColumnOrder = columnOrder.toCharArray(); 
        Arrays.sort(sortedColumnOrder); 
 
        // Build the encrypted text by reading the matrix column-wise based on sorted 
column order 
        StringBuilder encryptedText = new StringBuilder(); 
        for (char ch : sortedColumnOrder) { 
            int columnIndex = columnOrder.indexOf(ch); 
            for (int i = 0; i < rows; i++) { 
                encryptedText.append(transpositionMatrix[i][columnIndex]); 
            } 
        } 
        return encryptedText.toString(); 
    } 
} 
